services:
  # Redis 服務
  redis:
    image: redis:7-alpine
    container_name: amazon-monitor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - amazon-monitor-network

  # API 服務
  api-service:
    build:
      context: .
      dockerfile: apps/api_service/Dockerfile
    image: amazon-monitor-api:1.4
    container_name: amazon-monitor-api
    ports:
      - "8000:8000"
    environment:
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TZ=Asia/Taipei
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./apps/api_service:/app/apps/api_service
      - ./shared:/app/shared
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - amazon-monitor-network

  # Celery Worker 服務
  celery-worker:
    build:
      context: .
      dockerfile: apps/celery_service/Dockerfile
    image: amazon-monitor-celery-worker:1.3
    container_name: amazon-monitor-celery-worker
    environment:
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TZ=Asia/Taipei
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./apps/celery_service:/app/apps/celery_service
      - ./shared:/app/shared
    restart: unless-stopped
    networks:
      - amazon-monitor-network

  # Celery Beat 定時任務調度服務
  celery-beat:
    build:
      context: .
      dockerfile: apps/celery_service/Dockerfile
    image: amazon-monitor-celery-beat:1.3
    container_name: amazon-monitor-celery-beat
    environment:
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TZ=Asia/Taipei
    command: ["celery", "-A", "celery_app", "beat", "--loglevel=info", "--scheduler=celery.beat:PersistentScheduler"]
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./apps/celery_service:/app/apps/celery_service
      - ./shared:/app/shared
      - celery_beat_data:/app/apps/celery_service
    restart: unless-stopped
    networks:
      - amazon-monitor-network

  # Flower 監控服務
  flower:
    build:
      context: .
      dockerfile: apps/celery_service/Dockerfile
    image: amazon-monitor-flower:1.3
    container_name: amazon-monitor-flower
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=${REDIS_URL}
      - TZ=Asia/Taipei
    command: ["celery", "-A", "celery_app", "flower", "--port=5555", "--broker=redis://redis:6379"]
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./apps/celery_service:/app/apps/celery_service
      - ./shared:/app/shared
    restart: unless-stopped
    networks:
      - amazon-monitor-network

  # Nginx 反向代理（可選）
  nginx:
    image: nginx:alpine
    container_name: amazon-monitor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-service
    restart: unless-stopped
    networks:
      - amazon-monitor-network

volumes:
  redis_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  amazon-monitor-network:
    driver: bridge
